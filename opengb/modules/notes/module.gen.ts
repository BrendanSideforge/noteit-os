// This file is auto-generated by the Open Game Backend build system.
// Do not edit this file directly.
//
// Generated at 2024-06-20T17:59:58.553Z

import {
	ModuleContext as ModuleContextInner,
	Runtime,
	RuntimeError,
	ScriptContext as ScriptContextInner,
	TestContext as TestContextInner,
} from "../../.opengb/runtime/src/runtime/mod.ts";
import config from "../../.opengb/runtime_config.ts";
import { dependencyCaseConversionMap } from "../../.opengb/dependencyCaseConversion.ts";
import { actorCaseConversionMap } from "../../.opengb/actorCaseConversion.ts";

import {
	ACTOR_DRIVER,
	ActorBase,
} from "/Users/chucksides/Desktop/noteit/opengb/.opengb/actor.ts";
import prisma from "../../.opengb/prisma_output/notes/esm.js";
export { prisma };
export const Prisma = prisma.Prisma;

/**
 * Empty Request/Response type.
 *
 * This only exists because of some quirks of empty interfaces in
 * typescript that can be read more about here:
 * https://www.totaltypescript.com/the-empty-object-type-in-typescript
 */
export type Empty = Record<string, never>;

export { ActorBase, RuntimeError };

export * as Module from "../../.opengb/public/external_notes.ts";

import type {
	DependenciesCamel as DependenciesCamelFull,
	DependenciesSnake as DependenciesSnakeFull,
} from "/Users/chucksides/Desktop/noteit/opengb/.opengb/dependencies.d.ts";

interface DependenciesSnake {
	notes: DependenciesSnakeFull["notes"];
}

interface DependenciesCamel {
	notes: DependenciesCamelFull["notes"];
}

import type {
	ActorsCamel as ActorsCamelFull,
	ActorsSnake as ActorsSnakeFull,
} from "/Users/chucksides/Desktop/noteit/opengb/.opengb/actors.d.ts";

interface ActorsSnake {
	notes: ActorsSnakeFull["notes"];
}

interface ActorsCamel {
	notes: ActorsCamelFull["notes"];
}

export type ModuleContext = ModuleContextInner<
	DependenciesSnake,
	DependenciesCamel,
	ActorsSnake,
	ActorsCamel,
	Record<string, never>,
	prisma.PrismaClient
>;

export type TestContext = TestContextInner<
	DependenciesSnake,
	DependenciesCamel,
	ActorsSnake,
	ActorsCamel,
	Record<string, never>,
	prisma.PrismaClient
>;

export type TestFn = (ctx: TestContext) => Promise<void>;

export function test(name: string, fn: TestFn) {
	Runtime.test(
		config,
		ACTOR_DRIVER,
		"notes",
		name,
		fn,
		dependencyCaseConversionMap,
		actorCaseConversionMap,
	);
}

export type ScriptContext = ScriptContextInner<
	DependenciesSnake,
	DependenciesCamel,
	ActorsSnake,
	ActorsCamel,
	Record<string, never>,
	prisma.PrismaClient
>;
